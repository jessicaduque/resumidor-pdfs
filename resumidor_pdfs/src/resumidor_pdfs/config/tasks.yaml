read_pdf_task:
  description: >
    Using the path {pdf_path}, access the PDF file with the designated tool
    so that a PDFText can be returned.
  expected_output: >
    Your response must have these exact field names with values as described: {model_info}
  agent: pdf_reader_agent

analyze_task:
  description: >
    You will recieve a string, and you have to input that into the Text Section Separator Tool. 
    Be sure to use the tool.
    Use that tool, and you will recieve a TextSections with a 
    list of one of more strings, that contain unmodified parts of the original text. Return that.
  expected_output: >
    A TextSections that contains a list with strings that contain the sections of the original text
    that were analyzed and possibly modified.
  agent: analyzer_agent
  context: [read_pdf_task]

summarize_task:
  description: >
    A structure will be recieved, with a list of a minimum of 1 string. For each string, sequentially
    summarize each one, than concatenate it into the other. When two summaries are joined, make sure
    they continue cohesive.
    At the end, make sure everything makes sense, and is accurate to the content from the original text.
  expected_output: >
    A consise and accurate summmary generated from the recieved text. 
  agent: summarizer_agent
  context: [analyze_task]

format_task:
  description: >
    Format the given summary to match the style of a blog post.
  expected_output: >
    A Markdown-formatted text that has to include:
    - A relevant main title (always the first element of file);
    - Subheadings to organize all the content;
    - A conclusion. 
    The text should be cohesive and properly formatted according to Markdown standards. 
    At the end, guarantee there is a line break for another line that signs off the text 
    in the following format: "Made by Ollama/ChatGPT."
    After formatting it, revise your work to make sure it looks cohesive. 
  agent: formatter_agent
  context: [summarize_task]

